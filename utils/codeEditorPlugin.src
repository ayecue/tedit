codeEditorPluginModule = function(deps)
	inherits = @deps[0]
	BasicEditor = deps[1]
	Highlighter = deps[2]

	CodeEditorPlugin = {}

	CodeEditorPlugin.name = "Code Editor"
	CodeEditorPlugin.description = "Editor for editing code. Adds syntax highlighting and other functionality."
	CodeEditorPlugin.Highlighter = Highlighter
	CodeEditorPlugin.constructor = function(file, shell, config)
		me = self
		me.highlighterStream = null
		config.setDefault({
			"auto-validate": "0",
			"auto-build": "0"
		})
		me.super_constructor(file, shell, config)
		return me
	end function

	inherits(CodeEditorPlugin, BasicEditor)

	CodeEditorPlugin.getMainCmds = function()
		me = self
		cmds = me.super_getMainCmds()

		cmds[":v"] = "validate"
		cmds[":b"] = "build"
		cmds[":l"] = "launch"

		return cmds
	end function

	CodeEditorPlugin.build = function()
		me = self
		result = me.shell.build(me.file.path, me.file.parent.path)

		if (result == "") then
			print("Build done...")
			return true
		end if

		print("[Build Error]: " + result)
		return false
	end function

	CodeEditorPlugin.launch = function()
		me = self
		dir = me.file.parent.path
		filename = me.file.name
		binPath = dir

		if (dir != "/") then
			binPath = binPath + "/"
		end if

		binPath = binPath + filename.replace(".src", "")

		if (me.build()) then
			result = me.shell.launch(binPath, me.enrichedUserInput.prompt("Params:").raw)

			if (result == null) then
				print("Execution done...")
				return true
			end if

			print("[Execution Error]: Couldn't launch binary.")
		end if

		return false
	end function

	CodeEditorPlugin.validate = function()
		me = self
		lines = me.lines
		modes = me.getModes()
		currentMode = me.state.getItem("mode")

		if (currentMode == modes.insert) then
			oldLines = me.lines
			insertLines = me.insertLines
			cursorLine = me.state.getItem("cursor-line")

			if (me.insertOverride) then
				if (cursorLine == oldLines.len) then
					lines = oldLines[0: cursorLine - 1] + insertLines
				else if (cursorLine == 0) then
					lines = insertLines + oldLines[1:]
				else
					lines = oldLines[0: cursorLine] + insertLines + oldLines[cursorLine + 1:]
				end if
			else
				if (cursorLine == oldLines.len) then
					lines = oldLines + insertLines
				else if (cursorLine == 0) then
					lines = insertLines + oldLines
				else
					lines = oldLines[0: cursorLine] + insertLines + oldLines[cursorLine:]
				end if
			end if
		end if

		isValid = me.Highlighter.validate(lines.join(char(10)))

		if (isValid) then
			print("No errors found")
			return
		end if

		for err in me.Highlighter.errors
			print(err)
		end for
	end function

	CodeEditorPlugin.mainInteractEval = function(command, value)
		me = self

		if (command == "validate") then
			me.validate()
			me.enrichedUserInput.prompt("Press any key to continue...")
		else if (command == "build") then
			me.build()
		else if (command == "launch") then
			me.launch()
		else
			me.super_mainInteractEval(command, value)
		end if
	end function

	CodeEditorPlugin.supports = function(file)
		return file.indexOf(".src") != null
	end function

	CodeEditorPlugin.insertInteractEval = function(value)
		me = self
		value = value.replace(";", char(92) +"n")
		return me.super_insertInteractEval(value)
	end function

	CodeEditorPlugin.renderFoundLine = function(line, index, numberWidth)
		me = self
		me.highlighterStream = me.Highlighter.getParseStream(me.config)
		return me.super_renderFoundLine(line, index, numberWidth)
	end function

	CodeEditorPlugin.prepareVisualLine = function(line, index, highlight, offset)
		me = self
		state = me.state
		output = me.highlighterStream.write(line)

		//needs to be improved
		if ((highlight == null and index == state.getItem("cursor-line")) or (highlight != null and highlight)) then
			if (offset == null) then
				offset = state.getItem("cursor-offset")
			end if

			currentOffset = 0
			trueOffset = me.getIndent(line)
			max = output.len
			isInString = false
			newOutput = ""

			while (currentOffset < max)
				str = output[currentOffset]

				if (str.code == 9) then
					newOutput = newOutput + str
					currentOffset = currentOffset + 1
					continue
				else if (str.code == 60 and not isInString) then
					while (str.code != 62 and currentOffset < max)
						newOutput = newOutput + str
						currentOffset = currentOffset + 1
						str = output[currentOffset]
					end while
					newOutput = newOutput + str
					currentOffset = currentOffset + 1
					continue
				else if (str.code == 34) then
					isInString = not isInString
				end if

				if (trueOffset == offset[0]) then
					newOutput = newOutput + "<mark=" + me.config.get("cursor-position-color") + ">" + str
				else if (trueOffset == offset[1]) then
					newOutput = newOutput + "</mark>" + str
				else
					newOutput = newOutput + str
				end if

				currentOffset = currentOffset + 1
				trueOffset = trueOffset + 1
			end while

			output = newOutput
		end if

		return output
	end function

	CodeEditorPlugin.prepareInsertLine = function(line, index)
		me = self
		return me.highlighterStream.write(line)
	end function

	CodeEditorPlugin.saveAs = function()
		me = self

		me.super_saveAs()

		if (me.config.get("auto-build") == "1") then
			me.build()
		end if
	end function

	CodeEditorPlugin.save = function()
		me = self

		me.super_save()

		if (me.config.get("auto-build") == "1") then
			me.build()
		end if
	end function

	CodeEditorPlugin.beforeSubRender = function()
		me = self
		modes = me.getModes()
		currentMode = me.state.getItem("mode")

		if (currentMode == modes.insert and me.config.get("auto-validate") == "1") then
			me.validate()
		end if
	end function

	CodeEditorPlugin.render = function()
		me = self
		me.highlighterStream = me.Highlighter.getParseStream(me.config)
		return me.super_render()
	end function

	return CodeEditorPlugin
end function

injector.def("codeEditorPlugin", ["inherits", "basicEditor", "highlighter"], @codeEditorPluginModule)